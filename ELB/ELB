# Creating ELB with Custom VPC

provider "aws" {
    region     = var.region
    access_key = var.access_key
    secret_key = var.secret_key
}
  
# To Create VPC
  resource "aws_vpc" "vpc" {
    cidr_block       = "10.0.0.0/16"
    instance_tenancy = "default"
  
    tags = {
      Name = "vpc01"
    }
}
  
# To Create Public Subnet
  resource "aws_subnet" "public" {
    vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
    cidr_block              = "10.0.0.0/24"  # Replace with your desired CIDR block
    availability_zone       = "ap-south-1a"  # Replace with your desired Availability Zone
    map_public_ip_on_launch = true           # Enable auto-assign public IP
  
    # Optional: Assign tags to your subnets
    tags = {
      Name = "Public Subnet"
    }
}
  
# To Create Private Subnet
  resource "aws_subnet" "private" {
    vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
    cidr_block              = "10.0.1.0/24"  # Replace with your desired CIDR block
    availability_zone       = "ap-south-1b"  # Replace with your desired Availability Zone
    map_public_ip_on_launch = true           # Enable auto-assign public IP
  
    # Optional: Assign tags to your subnets
    tags = {
      Name = "Private Subnet"
    }
}
  
# To create the Internet gateway
  resource "aws_internet_gateway" "igw" {
    vpc_id = aws_vpc.vpc.id
  
    # Optional: Assign tags to your Internet Gateway
    tags = {
      Name = "My Internet Gateway"
    }
}
  
# To create Routetable-1
  resource "aws_route_table" "rt1" {
    vpc_id = aws_vpc.vpc.id
  
    route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.igw.id
    }
  
    # Optional: Assign tags to your route table
    tags = {
      Name = "MyRouteTable"
    }
}
  
# To create Routetable-2
  resource "aws_route_table" "rt2" {
    vpc_id = aws_vpc.vpc.id
  
    route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.igw.id
    }
  
    # Optional: Assign tags to your route table
    tags = {
      Name = "MyRouteTable2"
    }
}
  
# To attch Publicsubnet and routetable-1
  resource "aws_route_table_association" "subnet1_association" {
    subnet_id      = aws_subnet.public.id
    route_table_id = aws_route_table.rt1.id
}
  
  # To attch Privatesubnet and routetable-2
  resource "aws_route_table_association" "subnet2_association" {
    subnet_id      = aws_subnet.private.id
    route_table_id = aws_route_table.rt2.id
}
  
# Create a security group
  resource "aws_security_group" "example_security_group" {
    name_prefix = "example-security-group"
    description = "Example security group"
    vpc_id      = aws_vpc.vpc.id
  
    # Define your security group rules as needed
    # For example, allow SSH and HTTP traffic
    ingress {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  
    ingress {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  
    ingress {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  
    # outgoing traffic
  
    egress {
      from_port   = 0
      to_port     = 0
      protocol    = "-1"
      cidr_blocks = ["0.0.0.0/0"]
    }
}
  
# Crating first Ec2 instance
  resource "aws_instance" "first" {
    ami                         = var.ami           # Change to your desired AMI ID
    instance_type               = var.instance_type # Change to your desired instance type
    subnet_id                   = aws_subnet.public.id
    availability_zone           = var.availability_zone
    associate_public_ip_address = true         # Enable a public IP
    key_name                    = var.key_name # Change to your key pair name
    user_data                   = file("/home/ec2-user/file.sh")
    vpc_security_group_ids      = [aws_security_group.example_security_group.id]
    tags = {
      Name   = "First"
      source = "terraform"
    }
}
  
# Crating second Ec2 instance
  resource "aws_instance" "second" {
    ami                         = var.ami           # Change to your desired AMI ID
    instance_type               = var.instance_type # Change to your desired instance type
    subnet_id                   = aws_subnet.public.id
    availability_zone           = var.availability_zone
    associate_public_ip_address = true         # Enable a public IP
    key_name                    = var.key_name # Change to your key pair name
    user_data                   = file("/home/ec2-user/file1.sh")
    vpc_security_group_ids      = [aws_security_group.example_security_group.id]
    tags = {
      Name   = "Second"
      source = "terraform"
    }
}
  
# To create Load Balancer
  resource "aws_elb" "example" {
    name               = "example-alb"
    internal           = false # Set to true if you want an internal ALB
    subnets            = [aws_subnet.public.id, aws_subnet.private.id]
    security_groups = [aws_security_group.example_security_group.id]
  
    listener {
      instance_port     = 80
      instance_protocol = "http"
      lb_port           = 80
      lb_protocol       = "http"
    }
  
    health_check {
      target              = "HTTP:80/" # Specify the path for the health check
      interval            = 30         # Health check interval in seconds
      timeout             = 5          # Health check timeout in seconds
      healthy_threshold   = 2          # Number of consecutive successful health checks
      unhealthy_threshold = 2          # Number of consecutive failed health checks
    }
  
    # ELB attachments
    instances                 = ["${aws_instance.first.id}", "${aws_instance.second.id}"]
    cross_zone_load_balancing = true
    idle_timeout              = 40
    tags = {
      Name = "daemo-elb"
    }
}




# To create ELB using Target group
provider "aws" {
  region     = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}

# To Create VPC
resource "aws_vpc" "vpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "vpc01"
  }
}

# To Create Public Subnet
resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
  cidr_block              = "10.0.0.0/24"  # Replace with your desired CIDR block
  availability_zone       = "ap-south-1a"  # Replace with your desired Availability Zone
  map_public_ip_on_launch = true           # Enable auto-assign public IP

  # Optional: Assign tags to your subnets
  tags = {
    Name = "Public Subnet"
  }
}

# To Create Private Subnet
resource "aws_subnet" "private" {
  vpc_id                  = aws_vpc.vpc.id # Replace with your VPC ID
  cidr_block              = "10.0.1.0/24"  # Replace with your desired CIDR block
  availability_zone       = "ap-south-1b"  # Replace with your desired Availability Zone
  map_public_ip_on_launch = true           # Enable auto-assign public IP

  # Optional: Assign tags to your subnets
  tags = {
    Name = "Private Subnet"
  }
}

# To create the Internet gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id

  # Optional: Assign tags to your Internet Gateway
  tags = {
    Name = "My Internet Gateway"
  }
}

# To create Routetable-1
resource "aws_route_table" "rt1" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  # Optional: Assign tags to your route table
  tags = {
    Name = "MyRouteTable"
  }
}

# To create Routetable-2
resource "aws_route_table" "rt2" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  # Optional: Assign tags to your route table
  tags = {
    Name = "MyRouteTable2"
  }
}

# To attch Publicsubnet and routetable-1
resource "aws_route_table_association" "subnet1_association" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.rt1.id
}

# To attch Privatesubnet and routetable-2
resource "aws_route_table_association" "subnet2_association" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.rt2.id
}

# Create a security group
resource "aws_security_group" "example_security_group" {
  name_prefix = "example-security-group"
  description = "Example security group"
  vpc_id      = aws_vpc.vpc.id

  # Define your security group rules as needed
  # For example, allow SSH and HTTP traffic
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outgoing traffic

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Crating first Ec2 instance
resource "aws_instance" "first" {
  ami                         = var.ami           # Change to your desired AMI ID
  instance_type               = var.instance_type # Change to your desired instance type
  subnet_id                   = aws_subnet.public.id
  availability_zone           = var.availability_zone
  associate_public_ip_address = true         # Enable a public IP
  key_name                    = var.key_name # Change to your key pair name
  user_data                   = file("/home/ec2-user/file.sh")
  vpc_security_group_ids      = [aws_security_group.example_security_group.id]
  tags = {
    Name   = "First"
    source = "terraform"
  }
}

# Crating second Ec2 instance
resource "aws_instance" "second" {
  ami                         = var.ami           # Change to your desired AMI ID
  instance_type               = var.instance_type # Change to your desired instance type
  subnet_id                   = aws_subnet.public.id
  availability_zone           = var.availability_zone
  associate_public_ip_address = true         # Enable a public IP
  key_name                    = var.key_name # Change to your key pair name
  user_data                   = file("/home/ec2-user/file1.sh")
  vpc_security_group_ids      = [aws_security_group.example_security_group.id]
  tags = {
    Name   = "Second"
    source = "terraform"
  }
}

# create load balancer
resource "aws_lb" "example" {
  name                       = "example-alb"
  load_balancer_type         = "application"
  internal                   = false                                         # Set to true for an internal ALB
  subnets                    = [aws_subnet.public.id, aws_subnet.private.id] # Replace with your subnet IDs
  enable_deletion_protection = false
  security_groups            = [aws_security_group.example_security_group.id]

}

# create the target group
resource "aws_lb_target_group" "example_target_group" {
  name     = "example-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc.id # Replace with your VPC ID

  health_check {
    path                = "/" # Modify this to match your application's health check path
    protocol            = "HTTP"
    port                = 80
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}


# To register Ec2 instances with Target group
resource "aws_lb_target_group_attachment" "example" {
  target_group_arn = aws_lb_target_group.example_target_group.arn
  target_id        = aws_instance.first.id
}

# To register Ec2 instances with Target group
resource "aws_lb_target_group_attachment" "example1" {
  target_group_arn = aws_lb_target_group.example_target_group.arn
  target_id        = aws_instance.second.id
}

resource "aws_lb_listener" "example" {
  load_balancer_arn = aws_lb.example.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.example_target_group.arn
  }
}